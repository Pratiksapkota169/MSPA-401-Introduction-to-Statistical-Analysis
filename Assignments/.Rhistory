abline(v = lm.coef1, col = "red", lw=2, lty=2)
abline(h = lm.coef2, col = "darkblue", lw=2,lty = 2)
legend ( "topright",legend = c(lm.coef1, lm.coef2), col = c("darkblue", "red"),lty=c(2,2),lw=2)
install.packages(flux)
install.packages("flux")
install.packages("gridExtra")
install.packages("rockchalk")
install.packages("car")
# DO NOT ADD OR REVISE CODE HERE
knitr::opts_chunk$set(echo = FALSE)
# For students:  a = TRUE, b = FALSE
# To knit instructions:  a = FALSE, b = TRUE
a <- TRUE
b <- FALSE
# Perform the following steps to start the assignment.
# 1) Load/attach the following packages via library():  flux, ggplot2, gridExtra, moments, rockchalk, car.
# NOTE:  packages must be installed via install.packages() before they can be loaded.
library(flux)
library(ggplot2)
library(gridExtra)
library(moments)
library(rockchalk)
library(car)
# 2) Use the "mydata.csv" file from Assignment #1 or use the file posted on the course site.  Reading
# the files into R will require sep = "" or sep = " " to format data properly.  Use str() to check file
# structure.
# mydata <- read.csv("mydata.csv", sep = ",")
# mydata <- read.csv(file.path("c:...", "mydata.csv"), sep = ",")
mydata <- read.csv(file.path("mydata.csv"), sep = ",")
str(mydata)
keyboard <- read.csv(file.path("C:\\NorthWestern_Courses\\MSPA-401-Introduction-to-Statistical-Analysis\\Week7_401", "keyboard.csv"), sep=",")
str(keyboard)
# Power Calculation Program Using the Keyboard Experiment Data
keyboard <- read.csv(file.path("C:\\NorthWestern_Courses\\MSPA-401-Introduction-to-Statistical-Analysis\\Week7_401", "keyboard.csv"), sep=",")
str(keyboard)
difference <- keyboard$STYLE_B - keyboard$STYLE_A
summary(difference)
plot(keyboard$STYLE_B,keyboard$STYLE_A,xlab="B",ylab="A",col="blue",pch=16,
main="Plot of Typing Speeds for Two Different Keyboards")
hist(difference, col = "green", main = "Histogram of Differences in Typing Speed",
xlab = "Keyboard Style B minus Keyboard Style A")
abline(v=mean(difference))
sigma <- sd(difference)
sigma
# Assume a standard deviation for the differences in typing speed. sigma = 1.62
sigma <- 1.62
N <- c(10, 25, 50, 75)
values <- seq(0, 2, 0.1)
t <- numeric(0)
power <- numeric(0)
result <- numeric(0)
index <- as.integer(0)
for (n in N){
index <- index + 1
critical <- qt(0.95, n-1, ncp = 0, lower.tail = TRUE)
count <- as.integer(0)
for (D in values){
count <- count +1
for (k in 1:10000){
trial <- rnorm(n, mean = D, sd = 1.62)
t[k] <- mean(trial)*sqrt(n-1)/sd(trial)}
power[count] <- sum(t > critical)/10000}
result <- c(result,power)
}
L <- length(values)
L1 <- L+1
L2 <- 2*L
L3 <- L2 + 1
L4 <- 3*L
L5 <- 3*L + 1
L6 <- 4*L
plot(values,result[1:L],type = "b", col = "green", lwd = 2, ylab = "Power",
xlab = "True Difference in Typing Speeds (average words per minute)",
main = "Power for Four Sample Sizes", ylim = c(0.0,1.0))
lines(values, result[L1:L2], type = "b", col = "blue", lwd = 2)
lines(values, result[L3:L4], type = "b", col = "red", lwd = 2)
lines(values, result[L5:L6], type = "b", col = "orange", lwd = 2)
legend("topleft", legend = c("n=10 green", "n=25 blue", "n=50 red", "n=75 orange"))
legend("bottomright", legend = c("Power Calculations for Keyboard Comparison",
"One-sided Student's t Test Used", "Standard Deviation Assumed is 1.62",
"Type I Error Rate is 5%"))
par(mfrow = c(2,1))
t <- numeric(0)
power <- numeric(0)
result <- numeric(0)
index <- as.integer(0)
for (n in N){
index <- index + 1
critical <- qt(0.99, n-1, ncp = 0, lower.tail = TRUE)
count <- as.integer(0)
for (D in values){
count <- count +1
for (k in 1:10000){
trial <- rnorm(n, mean = D, sd = 1.62)
t[k] <- mean(trial)*sqrt(n-1)/sd(trial)}
power[count] <- sum(t > critical)/10000}
result <- c(result,power)
}
L <- length(values)
L1 <- L+1
L2 <- 2*L
L3 <- L2 + 1
L4 <- 3*L
L5 <- 3*L + 1
L6 <- 4*L
plot(values,result[1:L],type = "b", col = "green", lwd = 2, ylab = "Power",
xlab = "True Difference in Typing Speeds (average words per minute)",
main = "Power for Four Sample Sizes Type I Error Rate is 1%", ylim = c(0.0,1.0))
lines(values, result[L1:L2], type = "b", col = "blue", lwd = 2)
lines(values, result[L3:L4], type = "b", col = "red", lwd = 2)
lines(values, result[L5:L6], type = "b", col = "orange", lwd = 2)
legend("topleft", legend = c("n=10 green", "n=25 blue", "n=50 red", "n=75 orange"))
legend("bottomright", legend = c("One-sided Student's t Test Used",
"Standard Deviation Assumed is 1.62"))
t <- numeric(0)
power <- numeric(0)
result <- numeric(0)
index <- as.integer(0)
for (n in N){
index <- index + 1
critical <- qt(0.90, n-1, ncp = 0, lower.tail = TRUE)
count <- as.integer(0)
for (D in values){
count <- count +1
for (k in 1:10000){
trial <- rnorm(n, mean = D, sd = 1.62)
t[k] <- mean(trial)*sqrt(n-1)/sd(trial)}
power[count] <- sum(t > critical)/10000}
result <- c(result,power)
}
L <- length(values)
L1 <- L+1
L2 <- 2*L
L3 <- L2 + 1
L4 <- 3*L
L5 <- 3*L + 1
L6 <- 4*L
plot(values,result[1:L],type = "b", col = "green", lwd = 2, ylab = "Power",
xlab = "True Difference in Typing Speeds (average words per minute)",
main = "Power for Four Sample Sizes Type I Error Rate is 10%", ylim = c(0.0,1.0))
lines(values, result[L1:L2], type = "b", col = "blue", lwd = 2)
lines(values, result[L3:L4], type = "b", col = "red", lwd = 2)
lines(values, result[L5:L6], type = "b", col = "orange", lwd = 2)
legend("topleft", legend = c("n=10 green", "n=25 blue", "n=50 red", "n=75 orange"))
legend("bottomright", legend = c("One-sided Student's t Test Used",
"Standard Deviation Assumed is 1.62"))
par(mfrow=c(1,1))
# Perform the following steps to start the assignment.
# 1) Load/attach the following packages via library():  flux, ggplot2, gridExtra, moments, rockchalk, car.
# NOTE:  packages must be installed via install.packages() before they can be loaded.
library(flux)
library(ggplot2)
library(gridExtra)
library(moments)
library(rockchalk)
library(car)
# 2) Use the "mydata.csv" file from Assignment #1 or use the file posted on the course site.  Reading
# the files into R will require sep = "" or sep = " " to format data properly.  Use str() to check file
# structure.
# mydata <- read.csv("mydata.csv", sep = ",")
# mydata <- read.csv(file.path("c:...", "mydata.csv"), sep = ",")
mydata <- read.csv(file.path("mydata.csv"), sep = ",")
str(mydata)
ratio <- mydata$RATIO
hist(mydata[mydata, "RATIO"], col = "blue", main = "Histogram of RATIO", xlab = "")
ratio <- mydata$RATIO
hist(ratio, col = "blue", main = "Histogram of RATIO", xlab = "")
ratio <- mydata$RATIO
hist(mydata$RATIO, col = "blue", main = "Histogram of RATIO", xlab = "")
cells <- seq(min(ratio),max(ratio), by = 0.005)
hist(ratio, main = "Histogram of Ratio",breaks = cells,
freq  = FALSE, col = "red", xlab = "RATIO")
ratio <- mydata$RATIO
hist(mydata$RATIO, col = "blue", main = "Histogram of RATIO", xlab = "")
cells <- seq(min(ratio),max(ratio), by = 0.05)
hist(ratio, main = "Histogram of Ratio",breaks = cells,
freq  = FALSE, col = "red", xlab = "RATIO")
ratio <- mydata$RATIO
hist(mydata$RATIO, col = "blue", main = "Histogram of RATIO", xlab = "")
cells <- seq(min(ratio),max(ratio), by = 0.05)
hist(ratio, main = "Histogram of Ratio",
freq  = FALSE, col = "red", xlab = "RATIO")
lines(density(ratio), lwd=2.5, col = "darkblue")
ratio <- mydata$RATIO
hist(mydata$RATIO, col = "blue", main = "Histogram of RATIO", xlab = "")
cells <- seq(min(ratio),max(ratio), by = 0.05)
hist(ratio, main = "Histogram of RATIO",
freq  = FALSE, col = "red", xlab = "RATIO")
lines(density(ratio), lwd=2.5, col = "darkblue")
ratio <- mydata$RATIO
hist(ratio, main = "Histogram of RATIO",
freq  = FALSE, col = "lightblue", xlab = "RATIO")
lines(density(ratio), lwd=2.5, col = "darkblue")
ratio <- mydata$RATIO
hist(ratio, main = "Histogram of RATIO",
freq  = FALSE, col = "lightblue", xlab = "RATIO")
lines(density(ratio), lwd=2.5, col = "darkblue")
qqnorm(ratio, col = "blue", main = "Q-Q plot of RATIO", xlab = "")
qqline(ratio, col = "red")
ratio <- mydata$RATIO
hist(ratio, main = "Histogram of RATIO",
freq  = FALSE, col = "red", xlab = "RATIO")
lines(density(ratio), lwd=2.5, col = "darkblue")
qqnorm(ratio, col = "blue", main = "Q-Q plot of RATIO", xlab = "")
qqline(ratio, col = "red")
ratio <- mydata$RATIO
hist(ratio, main = "Histogram of RATIO",
freq  = FALSE, col = "red", xlab = "RATIO")
lines(density(ratio), lwd=2.5, col = "darkblue")
qqnorm(ratio, col = "blue", main = "Q-Q plot of RATIO")
qqline(ratio, col = "red")
ratio <- mydata$RATIO
hist(ratio, main = "Histogram of RATIO",
freq  = FALSE, col = "red", xlab = "RATIO")
lines(density(ratio), lwd=2.5, col = "darkblue")
qqnorm(ratio, col = "blue", main = "Q-Q plot of RATIO")
qqline(ratio, col = "red")
rockchalk::kurtosis(ratio,excess=FALSE, unbiased = FALSE)
rockchalk::skewness(ratio,unbiased = FALSE)
moments::kurtosis(ratio)
moments::skewness(ratio)
ratio <- mydata$RATIO
hist(ratio, main = "Histogram of RATIO",
freq  = FALSE, col = "red", xlab = "RATIO")
lines(density(ratio), lwd=2.5, col = "darkblue")
qqnorm(ratio, col = "blue", main = "Q-Q plot of RATIO")
qqline(ratio, col = "red")
print("\n Skewness of RATIO:\n")
rockchalk::skewness(ratio,unbiased = FALSE)
print("Kurtosis of RATIO:\n")
rockchalk::kurtosis(ratio,excess=FALSE, unbiased = FALSE)
ratio <- mydata$RATIO
hist(ratio, main = "Histogram of RATIO",
freq  = FALSE, col = "red", xlab = "RATIO")
lines(density(ratio), lwd=2.5, col = "darkblue")
qqnorm(ratio, col = "blue", main = "Q-Q plot of RATIO")
qqline(ratio, col = "red")
print("Skewness of RATIO:")
rockchalk::skewness(ratio,unbiased = FALSE)
print("Kurtosis of RATIO:")
rockchalk::kurtosis(ratio,excess=FALSE, unbiased = FALSE)
L_RATIO<- log10(mydata$RATIO)
hist(L_RATIO, main = "Histogram of L_RATIO",
freq  = FALSE, col = "red", xlab = "L_RATIO")
lines(density(L_RATIO), lwd=2.5, col = "darkblue")
qqnorm(L_RATIO, col = "blue", main = "Q-Q plot of L_RATIO")
qqline(L_RATIO, col = "red")
print("Skewness of L_RATIO:")
rockchalk::skewness(L_RATIO,unbiased = FALSE)
print("Kurtosis of L_RATIO:")
rockchalk::kurtosis(L_RATIO,excess=FALSE, unbiased = FALSE)
ratio <- mydata$RATIO
hist(ratio, main = "Histogram of RATIO", col = "red", xlab = "RATIO")
qqnorm(ratio, col = "blue", main = "Q-Q plot of RATIO")
qqline(ratio, col = "red")
print("Skewness of RATIO:")
rockchalk::skewness(ratio,unbiased = FALSE)
print("Kurtosis of RATIO:")
rockchalk::kurtosis(ratio,excess=FALSE, unbiased = FALSE)
L_RATIO<- log10(mydata$RATIO)
hist(ratio, main = "Histogram of L_RATIO", col = "red", xlab = "L_RATIO")
qqnorm(L_RATIO, col = "blue", main = "Q-Q plot of L_RATIO")
qqline(L_RATIO, col = "red")
print("Skewness of L_RATIO:")
rockchalk::skewness(L_RATIO,unbiased = FALSE)
print("Kurtosis of L_RATIO:")
rockchalk::kurtosis(L_RATIO,excess=FALSE, unbiased = FALSE)
L_RATIO<- log10(mydata$RATIO)
hist(L_RATIO, main = "Histogram of L_RATIO", col = "red", xlab = "L_RATIO")
qqnorm(L_RATIO, col = "blue", main = "Q-Q plot of L_RATIO")
qqline(L_RATIO, col = "red")
print("Skewness of L_RATIO:")
rockchalk::skewness(L_RATIO,unbiased = FALSE)
print("Kurtosis of L_RATIO:")
rockchalk::kurtosis(L_RATIO,excess=FALSE, unbiased = FALSE)
L_RATIO<- log10(mydata$RATIO)
hist(L_RATIO, main = "Histogram of L_RATIO", col = "red", xlab = "L_RATIO")
qqnorm(L_RATIO, col = "blue", main = "Q-Q plot of L_RATIO")
qqline(L_RATIO, col = "red")
print("Skewness of L_RATIO:")
rockchalk::skewness(L_RATIO,unbiased = FALSE)
print("Kurtosis of L_RATIO:")
rockchalk::kurtosis(L_RATIO,excess=FALSE, unbiased = FALSE)
boxplot(log10(RATIO)~CLASS, col = "green", range = 1.5, data = mydata)
L_RATIO<- log10(mydata$RATIO)
hist(L_RATIO, main = "Histogram of L_RATIO", col = "red", xlab = "L_RATIO")
qqnorm(L_RATIO, col = "blue", main = "Q-Q plot of L_RATIO")
qqline(L_RATIO, col = "red")
print("Skewness of L_RATIO:")
rockchalk::skewness(L_RATIO,unbiased = FALSE)
print("Kurtosis of L_RATIO:")
rockchalk::kurtosis(L_RATIO,excess=FALSE, unbiased = FALSE)
boxplot(log10(RATIO)~CLASS, col = "green", range = 1.5, data = mydata, main = "Box plot of L_RATIO by CLASS")
bartlett.test(L_RATIO ~ CLASS, mydata)
anova1 <- aov(L_RATIO ~ CLASS*SEX, data=mydata)
summary(anova1)
anova2 <- aov(L_RATIO ~ CLASS+SEX, data=mydata)
summary(anova2)
install.packages("HH")
anova1 <- aov(L_RATIO ~ CLASS*SEX, data=mydata)
summary(anova1)
anova2 <- aov(L_RATIO ~ CLASS+SEX, data=mydata)
summary(anova2)
library(HH)
interaction2wt(L_RATIO~CLASS*SEX, data=mydata)
anova1 <- aov(L_RATIO ~ CLASS*SEX, data=mydata)
summary(anova1)
anova2 <- aov(L_RATIO ~ CLASS+SEX, data=mydata)
summary(anova2)
TukeyHSD(anova2)
mydata$TYPE <- combineLevels(mydata$SEX, levs = c("F","M"), "ADULT")
View(mydata)
mydata$TYPE <- combineLevels(mydata$SEX, levs = c("F","M"), "ADULT")
par(mfrow = c(1,2))
hist(mydata[mydata[,13]=="I", "VOLUME"],  col = "red", main = "Infant VOLUME", xlab = "")
mydata$TYPE <- combineLevels(mydata$SEX, levs = c("F","M"), "ADULT")
par(mfrow = c(1,2))
hist(mydata[mydata[,11]=="I", "VOLUME"],  col = "red", main = "Infant VOLUME", xlab = "")
hist(mydata[mydata[,11]=="ADULT", "VOLUME"],  col = "green", main = "Adult VOLUME", xlab = "")
par(mfrow = c(1,1))
idxi <- mydata$TYPE == "I"
idxa <- mydata$TYPE == "ADULT"
max.v <- max(mydata$VOLUME)
min.v <- min(mydata$VOLUME)
delta <- (max.v - min.v)/10000
prop.infants <- numeric(10000)
prop.adults <- numeric(10000)
volume.value <- numeric(10000)
total.infants <- sum(idxi)
total.adults <- sum(idxa)
for (k in 1:10000) {
value <- min.v + k*delta
volume.value[k] <- value
prop.infants[k] <- sum(mydata$VOLUME[idxi] <= value)/total.infants
prop.adults[k] <-  sum(mydata$VOLUME[idxa] <= value)/total.adults
}
# prop.infants shows the impact of increasing the volume cutoff for
# harvesting. The following code shows how to "split" the population at
# a 50% harvest of infants.
n.infants <- sum(prop.infants <= 0.5)
split.infants <- min.v + (n.infants + 0.5)*delta  # This estimates the desired volume.
split.infants
n.adults <- sum(prop.adults <= 0.5)
split.adults <- min.v + (n.adults + 0.5)*delta
split.adults
idxi <- mydata$TYPE == "I"
idxa <- mydata$TYPE == "ADULT"
max.v <- max(mydata$VOLUME)
min.v <- min(mydata$VOLUME)
delta <- (max.v - min.v)/10000
prop.infants <- numeric(10000)
prop.adults <- numeric(10000)
volume.value <- numeric(10000)
total.infants <- sum(idxi)
total.adults <- sum(idxa)
for (k in 1:10000) {
value <- min.v + k*delta
volume.value[k] <- value
prop.infants[k] <- sum(mydata$VOLUME[idxi] <= value)/total.infants
prop.adults[k] <-  sum(mydata$VOLUME[idxa] <= value)/total.adults
}
# prop.infants shows the impact of increasing the volume cutoff for
# harvesting. The following code shows how to "split" the population at
# a 50% harvest of infants.
n.infants <- sum(prop.infants <= 0.5)
split.infants <- min.v + (n.infants + 0.5)*delta  # This estimates the desired volume.
split.infants
n.adults <- sum(prop.adults <= 0.5)
split.adults <- min.v + (n.adults + 0.5)*delta
split.adults
plot(volume.value,prop.adults)
plot(volume.value,prop.infants)
idxi <- mydata$TYPE == "I"
idxa <- mydata$TYPE == "ADULT"
max.v <- max(mydata$VOLUME)
min.v <- min(mydata$VOLUME)
delta <- (max.v - min.v)/10000
prop.infants <- numeric(10000)
prop.adults <- numeric(10000)
volume.value <- numeric(10000)
total.infants <- sum(idxi)
total.adults <- sum(idxa)
for (k in 1:10000) {
value <- min.v + k*delta
volume.value[k] <- value
prop.infants[k] <- sum(mydata$VOLUME[idxi] <= value)/total.infants
prop.adults[k] <-  sum(mydata$VOLUME[idxa] <= value)/total.adults
}
# prop.infants shows the impact of increasing the volume cutoff for
# harvesting. The following code shows how to "split" the population at
# a 50% harvest of infants.
n.infants <- sum(prop.infants <= 0.5)
split.infants <- min.v + (n.infants + 0.5)*delta  # This estimates the desired volume.
split.infants
n.adults <- sum(prop.adults <= 0.5)
split.adults <- min.v + (n.adults + 0.5)*delta
split.adults
idxi <- mydata$TYPE == "I"
idxa <- mydata$TYPE == "ADULT"
max.v <- max(mydata$VOLUME)
min.v <- min(mydata$VOLUME)
delta <- (max.v - min.v)/1000
prop.infants <- numeric(1000)
prop.adults <- numeric(1000)
volume.value <- numeric(1000)
total.infants <- sum(idxi)
total.adults <- sum(idxa)
for (k in 1:1000) {
value <- min.v + k*delta
volume.value[k] <- value
prop.infants[k] <- sum(mydata$VOLUME[idxi] <= value)/total.infants
prop.adults[k] <-  sum(mydata$VOLUME[idxa] <= value)/total.adults
}
# prop.infants shows the impact of increasing the volume cutoff for
# harvesting. The following code shows how to "split" the population at
# a 50% harvest of infants.
n.infants <- sum(prop.infants <= 0.5)
split.infants <- min.v + (n.infants + 0.5)*delta  # This estimates the desired volume.
split.infants
n.adults <- sum(prop.adults <= 0.5)
split.adults <- min.v + (n.adults + 0.5)*delta
split.adults
head(volume.value)
idxi <- mydata$TYPE == "I"
idxa <- mydata$TYPE == "ADULT"
max.v <- max(mydata$VOLUME)
min.v <- min(mydata$VOLUME)
delta <- (max.v - min.v)/10000
prop.infants <- numeric(10000)
prop.adults <- numeric(10000)
volume.value <- numeric(10000)
total.infants <- sum(idxi)
total.adults <- sum(idxa)
for (k in 1:10000) {
value <- min.v + k*delta
volume.value[k] <- value
prop.infants[k] <- sum(mydata$VOLUME[idxi] <= value)/total.infants
prop.adults[k] <-  sum(mydata$VOLUME[idxa] <= value)/total.adults
}
# prop.infants shows the impact of increasing the volume cutoff for
# harvesting. The following code shows how to "split" the population at
# a 50% harvest of infants.
n.infants <- sum(prop.infants <= 0.5)
split.infants <- min.v + (n.infants + 0.5)*delta  # This estimates the desired volume.
split.infants
n.adults <- sum(prop.adults <= 0.5)
split.adults <- min.v + (n.adults + 0.5)*delta
split.adults
head(volume.value)
head(prop.adults)
head(prop.infants)
idxi <- mydata$TYPE == "I"
idxa <- mydata$TYPE == "ADULT"
max.v <- max(mydata$VOLUME)
min.v <- min(mydata$VOLUME)
delta <- (max.v - min.v)/10000
prop.infants <- numeric(10000)
prop.adults <- numeric(10000)
volume.value <- numeric(10000)
total.infants <- sum(idxi)
total.adults <- sum(idxa)
for (k in 1:10000) {
value <- min.v + k*delta
volume.value[k] <- value
prop.infants[k] <- sum(mydata$VOLUME[idxi] <= value)/total.infants
prop.adults[k] <-  sum(mydata$VOLUME[idxa] <= value)/total.adults
}
# prop.infants shows the impact of increasing the volume cutoff for
# harvesting. The following code shows how to "split" the population at
# a 50% harvest of infants.
n.infants <- sum(prop.infants <= 0.5)
split.infants <- min.v + (n.infants + 0.5)*delta  # This estimates the desired volume.
split.infants
n.adults <- sum(prop.adults <= 0.5)
split.adults <- min.v + (n.adults + 0.5)*delta
split.adults
head(volume.value)
head(prop.adults)
head(prop.infants)
index <- (mydata$CLASS == "A5") | (mydata$CLASS == "A4")
mydata$TYPE[index] <- combineLevels(mydata$TYPE[index],
levs = c("I", "ADULT"), "ADULT")
# Or, alternatively:
# mydata$TYPE[with(mydata, CLASS=='A4' | CLASS=='A5')] <- 'ADULT'
idxi <- mydata$TYPE == "I"
idxa <- mydata$TYPE == "ADULT"
max.v <- max(mydata$VOLUME)
min.v <- min(mydata$VOLUME)
delta <- (max.v - min.v)/10000
prop.infants <- numeric(10000)
prop.adults <- numeric(10000)
volume.value <- numeric(10000)
total.infants <- sum(idxi)
total.adults <- sum(idxa)
for (k in 1:10000) {
value <- min.v + k*delta
volume.value[k] <- value
prop.infants[k] <- sum(mydata$VOLUME[idxi] <= value)/total.infants
prop.adults[k] <-  sum(mydata$VOLUME[idxa] <= value)/total.adults
}
# prop.infants shows the impact of increasing the volume cutoff for
# harvesting. The following code shows how to "split" the population at
# a 50% harvest of infants.
n.infants <- sum(prop.infants <= 0.5)
split.infants <- min.v + (n.infants + 0.5)*delta  # This estimates the desired volume.
split.infants
n.adults <- sum(prop.adults <= 0.5)
split.adults <- min.v + (n.adults + 0.5)*delta
split.adults
head(volume.value)
head(prop.adults)
head(prop.infants)
