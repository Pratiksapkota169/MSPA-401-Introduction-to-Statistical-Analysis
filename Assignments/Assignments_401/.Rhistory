x<-rnorm(n,mean=0,sd=1)
p <- c(0.25, 0.5, 0.75)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7)
set.seed(1237)
n<-300
x<-rnorm(n,mean=0,sd=1)
p <- c(0.25, 0.5, 0.75)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7)
set.seed(1237)
n<-10
x<-rnorm(n,mean=0,sd=1)
x
x<-rnorm(n,mean=0,sd=1)
x
set.seed(1237)
x<-rnorm(n,mean=0,sd=1)
x
reset.seed(1237)
re set.seed(1237)
set.seed(1237)
n<-20
x<-rnorm(n,mean=0,sd=1)
x
set.seed(1237)
n<-10
x<-rnorm(n,mean=0,sd=1)
x
p <- c(0.25, 0.5, 0.75)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7)
set.seed(1237)
n<-300
x<-rnorm(n,mean=0,sd=1)
p <- c(0.25, 0.5, 0.75)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7)
set.seed(1237)
n<-3000
x<-rnorm(n,mean=0,sd=1)
p <- c(0.25, 0.5, 0.75)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7)
set.seed(1237)
n<-30000
x<-rnorm(n,mean=0,sd=1)
p <- c(0.25, 0.5, 0.75)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7)
mu <- 0
s <- 1
n <- 5
nsim <- 10000 # number of simulations
# theoretical standard error
s / sqrt(n)
# simulation of experiment and the standard deviations of their means
y <- replicate( nsim, mean( rnorm(n, mu, s) ) )
sd(y)
mu <- 100
s <- 50
n <- 5
nsim <- 10000 # number of simulations
# theoretical standard error
s / sqrt(n)
# simulation of experiment and the standard deviations of their means
y <- replicate( nsim, mean( rnorm(n, mu, s) ) )
sd(y)
x.quantile<-function(x,n,p){
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7)
}
set.seed(1237)
n<-10
x<-rnorm(n,mean=0,sd=1)
p <- c(0.25, 0.5, 0.75)
x.quantile(x,n,p)
x.quantile<-function(x,n,p){
cat("\n Type2: ", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Type7: ", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
set.seed(1237)
n<-10
x<-rnorm(n,mean=0,sd=1)
p <- c(0.25, 0.5, 0.75)
x.quantile(x,n,p)
x.quantile<-function(x,n,p){
cat("\n Type2:for n =",n, quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Type7: for n= ",n, quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
set.seed(1237)
n<-10
x<-rnorm(n,mean=0,sd=1)
p <- c(0.25, 0.5, 0.75)
x.quantile(x,n,p)
x.quantile<-function(x,n,p){
cat("\n Quartiles using Type2: For n =",n, quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n, quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
set.seed(1237)
n<-10
x<-rnorm(n,mean=0,sd=1)
p <- c(0.25, 0.5, 0.75)
x.quantile(x,n,p)
x.quantile<-function(x,n,p){
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
set.seed(1237)
n<-10
x<-rnorm(n,mean=0,sd=1)
p <- c(0.25, 0.5, 0.75)
x.quantile(x,n,p)
set.seed(1237)
n<-30
x<-rnorm(n,mean=0,sd=1)
p <- c(0.25, 0.5, 0.75)
x.quantile(x,n,p)
x.quantile<-function(n){
set.seed(1237)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
#set.seed(1237)
n<-30
#x<-rnorm(n,mean=0,sd=1)
p <- c(0.25, 0.5, 0.75)
x.quantile(n)
x.quantile<-function(n){
set.seed(1237)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
#set.seed(1237)
s<-c(10,30,100,300)
#x<-rnorm(n,mean=0,sd=1)
p <- c(0.25, 0.5, 0.75)
for (n in s){
x.quantile(n)
}
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
#set.seed(1237)
s<-c(10,30,100,300)
for (n in s){
x.quantile(n)
}
#set.seed(1237)
s<-c(10,30,100,30000)
for (n in s){
x.quantile(n)
}
knitr::opts_chunk$set(echo = TRUE)
qnorm(c(0.25, 0.5, 0.75), mean = 0, sd = 1, lower.tail = TRUE)
#set.seed(1237)
s<-c(10,30,100,300)
for (n in s){
x.quantile(n)
}
s<-c(10,30,100,300)
for (n in s){
x.quantile(n)
}
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
s<-c(10,30,100,300)
for (n in s){
x.quantile(n)
}
s<-c(10,30,100,3000000000)
for (n in s){
x.quantile(n)
}
s<-c(10,30,100,3000000)
for (n in s){
x.quantile(n)
}
s<-c(10,30,100,300)
for (n in s){
x.quantile(n)
}
x.quantile<-function(n){
#set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
s<-c(10,30,100,300)
for (n in s){
x.quantile(n)
}
for (n in s){
x.quantile(n)
}
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
s<-c(10,30,100,300)
for (n in s){
x.quantile(n)
}
for (n in s){
x.quantile(n)
}
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
s<-c(10,30,100,300)
for (n in s){
x.quantile(n)
}
y<-qnorm(mean=0,sd=1)
hist(rnorm(10000))
hist(rnorm(10000,1,0))
hist(rnorm(10000,mean=1,sd=0))
hist(rnorm(10000,mean=0,sd=1))
s<-c(10,30,100,10000)
for (n in s){
x.quantile(n)
}
sd(y)
y<-rnorm(10000,mean=0,sd=1)
sd(y)
summary(y)
quantile(y,0.75)
quantile(y,0.68)
y<-rnorm(100,mean=0,sd=1)
summary(y)
knitr::opts_chunk$set(echo = TRUE)
qnorm(c(0.25, 0.5, 0.75), mean = 0, sd = 1, lower.tail = TRUE)
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,100,300)
#Quartiles for 4 normal distribution samples
for (n in s){
x.quantile(n)
}
x <- c(-29.6,-20.9,-19.7,-15.4,-12.3,-8.0,-4.3,0.8,2.0,6.2,11.2,25.0)
length(x)
sort(x, decreasing = FALSE)
# Black's method gives -17.55 which matches type = 2 in R.
-0.5*(19.7+15.4)
# The summary() function uses the type = 7 option.  This results in -16.480.
summary(x)
p <- c(0.25, 0.5, 0.75)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 1)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 3)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 4)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 5)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 6)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 8)
quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 9)
boxplot(x, col = "blue")
boxplot.stats(x)
knitr::opts_chunk$set(echo = TRUE)
qnorm(c(0.25, 0.5, 0.75), mean = 0, sd = 1, lower.tail = TRUE)
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,100,300)
#Quartiles for 4 normal distribution samples
print("Quartiles using different sample sizes and two different types")
for (n in s){
x.quantile(n)
}
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,100,300)
#Quartiles for 4 normal distribution samples
print("Quartiles of a normal distribution (with mean=0, sd=1) using different sample sizes and two different methods")
for (n in s){
x.quantile(n)
}
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,100,300)
#Quartiles for 4 normal distribution samples
print("Quartiles of a normal distribution (with mean=0, sd=1) using different sample sizes and two different methods:")
for (n in s){
x.quantile(n)
}
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,100,30000)
#Quartiles for 4 normal distribution samples
print("Quartiles of a normal distribution (with mean=0, sd=1) using different sample sizes and two different methods:")
for (n in s){
x.quantile(n)
}
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,100,300000)
#Quartiles for 4 normal distribution samples
print("Quartiles of a normal distribution (with mean=0, sd=1) using different sample sizes and two different methods:")
for (n in s){
x.quantile(n)
}
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,10000,300000)
#Quartiles for 4 normal distribution samples
print("Quartiles of a normal distribution (with mean=0, sd=1) using different sample sizes and two different methods:")
for (n in s){
x.quantile(n)
}
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,10000,100000)
#Quartiles for 4 normal distribution samples
print("Quartiles of a normal distribution (with mean=0, sd=1) using different sample sizes and two different methods:")
for (n in s){
x.quantile(n)
}
y<-rnorm(300,mean=0,sd=1)
boxplot(y)
boxplot.stats(y)
knitr::opts_chunk$set(echo = TRUE)
qnorm(c(0.25, 0.5, 0.75), mean = 0, sd = 1, lower.tail = TRUE)
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,100,300)
#Quartiles for 4 normal distribution samples
print("Quartiles of a normal distribution (with mean=0, sd=1) using different sample sizes and two different methods:")
for (n in s){
x.quantile(n)
}
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,100,300)
#Quartiles for 4 normal distribution samples
print("Quartiles of a normal distribution (with mean=0, sd=1) using different sample sizes and two different methods:")
for (n in s){
x.quantile(n)
}
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,100,300)
#Quartiles for 4 normal distribution samples
cat("Quartiles of a normal distribution (with mean=0, sd=1) using different sample sizes and two different methods:")
for (n in s){
x.quantile(n)
}
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles for standard normal distribution using Type2: For n =",n, ",",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles for standard normal distribution using Type7: For n= ",n,",", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,100,300)
###Quartiles for 4 normal distribution samples
for (n in s){
x.quantile(n)
}
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles for standard normal distribution using Type2 and  n =",n, ":",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles for standard normal distribution using Type7 and n= ",n,":", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,100,300)
###Quartiles for 4 normal distribution samples
for (n in s){
x.quantile(n)
}
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles for standard normal distribution using Type2 and  n = ",n, ":",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles for standard normal distribution using Type7 and n = ",n,":", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,100,300)
###Quartiles for 4 normal distribution samples
for (n in s){
x.quantile(n)
}
# Add your set.seed(), rnorm() and quantile() code to this code 'chunk':
##Function for calculating quartiles using type =2 and type=7
x.quantile<-function(n){
set.seed(1237)
p <- c(0.25, 0.5, 0.75)
x<-rnorm(n,mean=0,sd=1)
cat("\n Quartiles for standard normal distribution using Type2 and n = ",n, ":",quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 2))
cat("\n Quartiles for standard normal distribution using Type7 and n = ",n, ":", quantile(x, probs = p, na.rm = FALSE, names = TRUE, type = 7))
}
###4 sample sizes
s<-c(10,30,100,300)
###Quartiles for 4 normal distribution samples
for (n in s){
x.quantile(n)
}
