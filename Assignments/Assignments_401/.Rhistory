t <- (mu-0)/std
t
critical.value <- qt(0.95, 9, lower.tail = TRUE)
critical.value
2*pt(-abs(t),9)
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
t
critical.value <- qt(0.99, 8, lower.tail = TRUE)
critical.value
2*pt(-abs(t),9)
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
t
critical.value <- qt(0.005, 8, lower.tail = TRUE)
critical.value
2*pt(-abs(t),9)
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
t
critical.value <- qt(0.025, 9, lower.tail = TRUE)
critical.value
2*pt(-abs(t),9)
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
t
critical.value <- qt(0.005, 8, lower.tail = TRUE)
critical.value
2*pt(-abs(t),9)
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
t
critical.value <- qt(0.025, 9, lower.tail = TRUE)
critical.value
2*pt(-abs(t),9)
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
t
critical.value <- qt(0.025, 9, lower.tail = TRUE)
critical.value
2*pt(-abs(t),9)
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
t.values
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
cat("\n Tests statistic value: ",t)
critical.value <- qt(0.025, 9, lower.tail = TRUE)
cat("\n Crtitical t-value: ", critical.value)
cat("\nObserved p-value: ",2*pt(-abs(t),9))
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
cat("\n 95% Confidence Interval:\n")
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
cat("\nObserved Test statistic value: ",t)
critical.value <- qt(0.025, 9, lower.tail = TRUE)
cat("\nCrtitical t-value: ", critical.value)
cat("\nObserved p-value: ",2*pt(-abs(t),9))
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
cat("\n95% Confidence Interval:\n")
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
mu
t <- (mu-0)/std
cat("\nObserved Test statistic value: ",t)
critical.value <- qt(0.025, 9, lower.tail = TRUE)
cat("\nCrtitical t-value: ", critical.value)
cat("\nObserved p-value: ",2*pt(-abs(t),9))
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
cat("\n95% Confidence Interval:\n")
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
cat("\nObserved Test statistic value: ",t)
critical.value <- qt(0.025, 9, lower.tail = TRUE)
cat("\n\nCrtitical t-value: ", critical.value)
cat("\n\nObserved p-value: ",2*pt(-abs(t),9))
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
cat("\n\n95% Confidence Interval:\n")
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
cat("\nObserved Test statistic value: ",t)
critical.value <- qt(0.025, 9, lower.tail = TRUE)
cat("\n\nCritical t-value: ", critical.value)
cat("\n\nObserved p-value: ",2*pt(-abs(t),9))
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
cat("\n\n95% Confidence Interval:\n")
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
t.test(wt.diff, alternative = c("two.sided"), mu = 0, conf.level = 0.95)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
cat("\nObserved Test statistic value: ",t)
critical.value <- qt(0.025, 9, lower.tail = TRUE)
cat("\n\nCritical t-value: ", critical.value)
cat("\n\nObserved p-value: ",2*pt(-abs(t),9))
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
cat("\n\n95% Confidence Interval:\n")
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
#t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
#t.test(wt.diff, alternative = c("two.sided"), mu = 0, conf.level = 0.95)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
cat("\nObserved Test statistic value: ",t)
critical.value <- qt(0.025, 9, lower.tail = TRUE)
cat("\n\nCritical t-value: ", critical.value)
cat("\n\nObserved p-value: ",2*pt(-abs(t),9))
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
cat("\n\n95% Confidence Interval:\n")
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
#t.test(wt.diff, alternative = c("two.sided"), mu = 0, conf.level = 0.95)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
cat("\nObserved Test statistic value: ",t)
critical.value <- qt(0.025, 9, lower.tail = TRUE)
cat("\n\nCritical t-value: ", critical.value)
cat("\n\nObserved p-value: ",2*pt(-abs(t),9))
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
cat("\n\n95% Confidence Interval:\n")
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
wt.diff <- pre-post
#t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
#t.test(wt.diff, alternative = c("two.sided"), mu = 0, conf.level = 0.95)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
cat("\nObserved Test statistic value: ",t)
critical.value <- qt(0.025, 9, lower.tail = TRUE)
cat("\n\nCritical t-value: ", critical.value)
cat("\n\nObserved p-value: ",2*pt(-abs(t),9))
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
cat("\n\n95% Confidence Interval:\n")
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
std <- sd(wt.diff)/sqrt(10)
# DO NOT ADD OR REVISE CODE HERE
knitr::opts_chunk$set(echo = TRUE)
b <- dbinom(50,100,0.5)
n<-pnorm(50+0.5, 100*0.5, sqrt(100*0.5*0.5), lower.tail = TRUE) - pnorm(50-0.5, 100*0.5, sqrt(100*0.5*0.5), lower.tail = TRUE)
c(binom = b,normal = n)
pb <- pbinom(39, 100, 0.5, lower.tail = TRUE)
pn <- pnorm(39.5, 100*0.5, sqrt(100*0.5*0.5), lower.tail = TRUE)
c(binom = pb, normal = pn)
#1-pbinom(59, 100, 0.5, lower.tail = TRUE)
#1-pbinom(59, 100, 0.5, lower.tail = TRUE)
p60 <- c(binom = 1-pbinom(59, 100, 0.5, lower.tail = TRUE), normal = 1-pbinom(59, 100, 0.5, lower.tail = TRUE))
p60
mu <- 100*0.02
var <- 100*0.02*0.98
binom.dist <- c(mu,var)
exp.mu<-sum(seq(0,100)*(dbinom(seq(0,100),100,0.02)))
exp.var <- (sum(((seq(0,100)-mu)*(seq(0,100)-mu))*(dbinom(seq(0,100),100,0.02))))
discrete.dist <- c(exp.mu,exp.var)
kable(data.frame(binom.dist, discrete.dist, row.names = c("mean","variance")))
set.seed(123)
x<-rexp(n = 100, rate = 1)
par(mfrow = c(1,2))
boxplot(x, notch = TRUE, main = "Box plot of x", col = "blue")
qqnorm(x, col = "darkgreen")
qqline(x,col = "red", lw=1.5)
par(mfrow = c(1,1))
cat("\nExtreme outliers: \n")
boxplot.stats(x,coef = 3)$out
y <- 3*(x^(1/3) - 1)
par(mfrow = c(1,2))
boxplot(y, notch = TRUE, main = "Box plot of y", col = "blue")
qqnorm(y, col = "darkgreen")
qqline(y,col = "red", lw=1.5)
par(mfrow = c(1,1))
cat("\nExtreme outliers: \n")
boxplot.stats(y,coef = 3)$out
# load "ChickWeight" dataset
data(ChickWeight)
# Create T | F vector indicating observations with Time == 21 and Diet == "1" OR "3"
index <- ChickWeight$Time == 21 & (ChickWeight$Diet == "1" | ChickWeight$Diet == "3")
# Create data frame, "result," with the weight and Diet of those observations with "TRUE" "index"" values
result <- subset(ChickWeight[index, ], select = c(weight, Diet))
# Encode "Diet" as a factor
result$Diet <- factor(result$Diet)
str(result)
diet1 <- (subset(result, subset = (Diet == "1"))$weight)
diet3 <- (subset(result, subset = (Diet == "3"))$weight)
t.test(diet3,diet1, var.equal=TRUE, paired=FALSE)
# load "ChickWeight" dataset
data(ChickWeight)
# Create T | F vector indicating observations with Diet == "3"
index <- ChickWeight$Diet == "3"
# Create vector of "weight" for observations where Diet == "3" and Time == 20
pre <- subset(ChickWeight[index, ], Time == 20, select = weight)$weight
# Create vector of "weight" for observations where Diet == "3" and Time == 21
post <- subset(ChickWeight[index, ], Time == 21, select = weight)$weight
plot(pre,post,col = "red",xlab = "pre chick weight", ylab = "post chick weight", main = "Chick weight for time 21 vs 20",pch = 15, panel.first = grid())
wt.diff <- pre-post
#t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
#t.test(wt.diff, alternative = c("two.sided"), mu = 0, conf.level = 0.95)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
cat("\nObserved Test statistic value: ",t)
critical.value <- qt(0.025, 9, lower.tail = TRUE)
cat("\n\nCritical t-value: ", critical.value)
cat("\n\nObserved p-value: ",2*pt(-abs(t),9))
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
cat("\n\n95% Confidence Interval:\n")
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
data(Nile)
m <- mean(Nile)
std <- sd(Nile)
x <- seq(from = 400, to = 1400, by = 1)
hist(Nile, freq = FALSE, col = "darkblue", xlab = "Flow",
main = "Histogram of Nile River Flows, 1871 to 1970")
curve(dnorm(x, mean = m, sd = std), col = "orange", lwd = 2, add = TRUE)
library('moments')
d = data.frame(skewness=skewness(Nile), kurtosis=kurtosis(Nile))
library("knitr")
kable(d, format = "html", caption =  "Skewness and Kurtosis statistics of Nile River Flow Data")
par(mfrow = c(1,2))
qqnorm(Nile, col = "blue", pch = 21)
qqline(Nile, col = "darkred")
boxplot(Nile, notch=TRUE,
col = "darkgreen",
main="Box plot", ylab = "Nile River Flow")
par(mfrow = c(1,1))
set.seed(124)
sample1 <- replicate(1000,mean(sample(Nile, 16, replace = TRUE)))
# m <- numeric(0)  # Mean values stored here.
# N <- 1000  # Number of iterations used in establishing the empirical sampling distribution.
# set.seed(127)
# for (i in 1:N)
# {
#   #m[i] <- sum(sample(Nile, 16, replace = TRUE))/16
#   m[i] <- mean(sample(Nile,64,replace=TRUE))
# }
# mean(m)
# sd(m)
# var(m)
set.seed(127)
sample2 <- replicate(1000,mean(sample(Nile, 64, replace = TRUE)))
nile.sample1<- c(mean = round(mean(sample1),4), std =round(sd(sample1),4), variance = round(var(sample1),4))
nile.sample2<- c(mean = round(mean(sample2),4), std =round(sd(sample2),4), variance = round(var(sample2),4))
kable(data.frame(nile.sample1,nile.sample2), format = "html", caption = "Basic statistics of two mean sampling distributions of Nile Flows")
par(mfrow=(c(1,2)))
x <- seq(from = 750, to = 1050, by = 1)
hist(sample1, freq = FALSE, col = "lightblue", xlab = "Mean Flows, N=1000, n=16", xlim = c(750,1050), ylim = c(0,0.025))
#main = "1000 Random samples,n = 16", cex.main=0.5)
curve(dnorm(x, mean = mean(sample1), sd = sd(sample1)), col = "red", lwd = 2, add = TRUE)
hist(sample2, freq = FALSE, col = "lightgreen", xlab = "Mean Flows, N=1000, n=64", xlim = c(750,1050), ylim = c(0,0.025))
#main = "1000 Random samples, n = 64",cex.main=0.5)
curve(dnorm(x, mean = mean(sample2), sd = sd(sample2)), col = "red", lwd = 2, add = TRUE)
par(mfrow=(c(1,1)))
data(Seatbelts)
Seatbelts <- as.data.frame(Seatbelts)
Seatbelts$Month <- seq(from = 1, to = nrow(Seatbelts))
Seatbelts <- subset(Seatbelts, select = c(DriversKilled, Month))
summary(Seatbelts)
killed <- factor(Seatbelts$DriversKilled > 118.5, labels = c("below", "above"))
month <- factor(Seatbelts$Month > 96.5, labels = c("below", "above"))
plot(DriversKilled~Month,data=Seatbelts,col = "darkgreen", main = "Plot of Drivers Killed vs Month")
abline(v = median(Seatbelts$Month), col = "red", lw=2, lty=2)
abline(h = median(Seatbelts$DriversKilled), col = "darkblue", lw=2,lty = 2)
legend ( "topright",legend = c("Median of DriversKilled = 118.5", "Median of Month = 96.5"), col = c("darkblue", "red"),lty=c(2,2),lw=2)
counts <- table(killed, month)
counts
counts.X2<-chisq.test(counts, correct = FALSE )
counts.X2
cat("Observed p-value is less than 0.05: \n")
counts.X2$p.value<(1-0.95)
cat("\nObserved statistic is greater than Chi-sq statistic for Alpha = 0.05: \n")
counts.X2$statistic > qchisq(0.95,df=1,lower.tail = TRUE)
exp.value <- function(x){
e11 <- x[3, 1] * x[1, 3] / x[3, 3]
e12 <- x[3, 2] * x[1, 3] / x[3, 3]
e21 <- x[3, 1] * x[2, 3] / x[3, 3]
e22 <- x[3, 2] * x[2, 3] / x[3, 3]
return(c(e11,e12,e21,e22))
}
counts.margins <- addmargins(counts)
counts.margins
counts.m <- matrix(counts,ncol=2, dimnames = list(c("below","above"),c("below","above")))
#counts.m
#seatbelt.expected <- matrix(exp.value(matrix(m,ncol = 3)),ncol=2,dimnames = list(c("below","above"),c("below","above")))
seatbelt.expected <- matrix(exp.value(counts.margins),ncol=2,byrow=TRUE,dimnames = list(c("below","above"),c("below","above")))
#seatbelt.expected
chi.m<-(counts.m-seatbelt.expected)^2/seatbelt.expected
X2 <- sum(chi.m)
cat("\nObserved Chi-Squared Value: ", X2)
cat("\nObserved p-value: ", 1-pchisq(X2,df=1))
# DO NOT ADD OR REVISE CODE HERE
knitr::opts_chunk$set(echo = TRUE)
b <- dbinom(50,100,0.5)
n<-pnorm(50+0.5, 100*0.5, sqrt(100*0.5*0.5), lower.tail = TRUE) - pnorm(50-0.5, 100*0.5, sqrt(100*0.5*0.5), lower.tail = TRUE)
c(binom = b,normal = n)
pb <- pbinom(39, 100, 0.5, lower.tail = TRUE)
pn <- pnorm(39.5, 100*0.5, sqrt(100*0.5*0.5), lower.tail = TRUE)
c(binom = pb, normal = pn)
#1-pbinom(59, 100, 0.5, lower.tail = TRUE)
#1-pbinom(59, 100, 0.5, lower.tail = TRUE)
p60 <- c(binom = 1-pbinom(59, 100, 0.5, lower.tail = TRUE), normal = 1-pbinom(59, 100, 0.5, lower.tail = TRUE))
p60
mu <- 100*0.02
var <- 100*0.02*0.98
binom.dist <- c(mu,var)
exp.mu<-sum(seq(0,100)*(dbinom(seq(0,100),100,0.02)))
exp.var <- (sum(((seq(0,100)-mu)*(seq(0,100)-mu))*(dbinom(seq(0,100),100,0.02))))
discrete.dist <- c(exp.mu,exp.var)
kable(data.frame(binom.dist, discrete.dist, row.names = c("mean","variance")))
# DO NOT ADD OR REVISE CODE HERE
knitr::opts_chunk$set(echo = TRUE)
b <- dbinom(50,100,0.5)
n<-pnorm(50+0.5, 100*0.5, sqrt(100*0.5*0.5), lower.tail = TRUE) - pnorm(50-0.5, 100*0.5, sqrt(100*0.5*0.5), lower.tail = TRUE)
c(binom = b,normal = n)
pb <- pbinom(39, 100, 0.5, lower.tail = TRUE)
pn <- pnorm(39.5, 100*0.5, sqrt(100*0.5*0.5), lower.tail = TRUE)
c(binom = pb, normal = pn)
#1-pbinom(59, 100, 0.5, lower.tail = TRUE)
#1-pbinom(59, 100, 0.5, lower.tail = TRUE)
p60 <- c(binom = 1-pbinom(59, 100, 0.5, lower.tail = TRUE), normal = 1-pbinom(59, 100, 0.5, lower.tail = TRUE))
p60
mu <- 100*0.02
var <- 100*0.02*0.98
binom.dist <- c(mu,var)
exp.mu<-sum(seq(0,100)*(dbinom(seq(0,100),100,0.02)))
exp.var <- (sum(((seq(0,100)-mu)*(seq(0,100)-mu))*(dbinom(seq(0,100),100,0.02))))
discrete.dist <- c(exp.mu,exp.var)
library("knitr")
kable(data.frame(binom.dist, discrete.dist, row.names = c("mean","variance")))
set.seed(123)
x<-rexp(n = 100, rate = 1)
par(mfrow = c(1,2))
boxplot(x, notch = TRUE, main = "Box plot of x", col = "blue")
qqnorm(x, col = "darkgreen")
qqline(x,col = "red", lw=1.5)
par(mfrow = c(1,1))
cat("\nExtreme outliers: \n")
boxplot.stats(x,coef = 3)$out
y <- 3*(x^(1/3) - 1)
par(mfrow = c(1,2))
boxplot(y, notch = TRUE, main = "Box plot of y", col = "blue")
qqnorm(y, col = "darkgreen")
qqline(y,col = "red", lw=1.5)
par(mfrow = c(1,1))
cat("\nExtreme outliers: \n")
boxplot.stats(y,coef = 3)$out
# load "ChickWeight" dataset
data(ChickWeight)
# Create T | F vector indicating observations with Time == 21 and Diet == "1" OR "3"
index <- ChickWeight$Time == 21 & (ChickWeight$Diet == "1" | ChickWeight$Diet == "3")
# Create data frame, "result," with the weight and Diet of those observations with "TRUE" "index"" values
result <- subset(ChickWeight[index, ], select = c(weight, Diet))
# Encode "Diet" as a factor
result$Diet <- factor(result$Diet)
str(result)
diet1 <- (subset(result, subset = (Diet == "1"))$weight)
diet3 <- (subset(result, subset = (Diet == "3"))$weight)
t.test(diet3,diet1, var.equal=TRUE, paired=FALSE)
# load "ChickWeight" dataset
data(ChickWeight)
# Create T | F vector indicating observations with Diet == "3"
index <- ChickWeight$Diet == "3"
# Create vector of "weight" for observations where Diet == "3" and Time == 20
pre <- subset(ChickWeight[index, ], Time == 20, select = weight)$weight
# Create vector of "weight" for observations where Diet == "3" and Time == 21
post <- subset(ChickWeight[index, ], Time == 21, select = weight)$weight
plot(pre,post,col = "red",xlab = "pre chick weight", ylab = "post chick weight", main = "Chick weight for time 21 vs 20",pch = 15, panel.first = grid())
wt.diff <- pre-post
#t.test(pre,post,alternative = c("two.sided"),paired = TRUE, var.equal = TRUE)
#t.test(wt.diff, alternative = c("two.sided"), mu = 0, conf.level = 0.95)
std <- sd(wt.diff)/sqrt(10)
mu <- mean(wt.diff)
t <- (mu-0)/std
cat("\nObserved Test statistic value: ",t)
critical.value <- qt(0.025, 9, lower.tail = TRUE)
cat("\n\nCritical t-value: ", critical.value)
cat("\n\nObserved p-value: ",2*pt(-abs(t),9))
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
cat("\n\n95% Confidence Interval:\n")
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
data(Nile)
m <- mean(Nile)
std <- sd(Nile)
x <- seq(from = 400, to = 1400, by = 1)
hist(Nile, freq = FALSE, col = "darkblue", xlab = "Flow",
main = "Histogram of Nile River Flows, 1871 to 1970")
curve(dnorm(x, mean = m, sd = std), col = "orange", lwd = 2, add = TRUE)
library('moments')
d = data.frame(skewness=skewness(Nile), kurtosis=kurtosis(Nile))
library("knitr")
kable(d, format = "html", caption =  "Skewness and Kurtosis statistics of Nile River Flow Data")
par(mfrow = c(1,2))
qqnorm(Nile, col = "blue", pch = 21)
qqline(Nile, col = "darkred")
boxplot(Nile, notch=TRUE,
col = "darkgreen",
main="Box plot", ylab = "Nile River Flow")
par(mfrow = c(1,1))
set.seed(124)
sample1 <- replicate(1000,mean(sample(Nile, 16, replace = TRUE)))
# m <- numeric(0)  # Mean values stored here.
# N <- 1000  # Number of iterations used in establishing the empirical sampling distribution.
# set.seed(127)
# for (i in 1:N)
# {
#   #m[i] <- sum(sample(Nile, 16, replace = TRUE))/16
#   m[i] <- mean(sample(Nile,64,replace=TRUE))
# }
# mean(m)
# sd(m)
# var(m)
set.seed(127)
sample2 <- replicate(1000,mean(sample(Nile, 64, replace = TRUE)))
nile.sample1<- c(mean = round(mean(sample1),4), std =round(sd(sample1),4), variance = round(var(sample1),4))
nile.sample2<- c(mean = round(mean(sample2),4), std =round(sd(sample2),4), variance = round(var(sample2),4))
kable(data.frame(nile.sample1,nile.sample2), format = "html", caption = "Basic statistics of two mean sampling distributions of Nile Flows")
par(mfrow=(c(1,2)))
x <- seq(from = 750, to = 1050, by = 1)
hist(sample1, freq = FALSE, col = "lightblue", xlab = "Mean Flows, N=1000, n=16", xlim = c(750,1050), ylim = c(0,0.025))
#main = "1000 Random samples,n = 16", cex.main=0.5)
curve(dnorm(x, mean = mean(sample1), sd = sd(sample1)), col = "red", lwd = 2, add = TRUE)
hist(sample2, freq = FALSE, col = "lightgreen", xlab = "Mean Flows, N=1000, n=64", xlim = c(750,1050), ylim = c(0,0.025))
#main = "1000 Random samples, n = 64",cex.main=0.5)
curve(dnorm(x, mean = mean(sample2), sd = sd(sample2)), col = "red", lwd = 2, add = TRUE)
par(mfrow=(c(1,1)))
data(Seatbelts)
Seatbelts <- as.data.frame(Seatbelts)
Seatbelts$Month <- seq(from = 1, to = nrow(Seatbelts))
Seatbelts <- subset(Seatbelts, select = c(DriversKilled, Month))
summary(Seatbelts)
killed <- factor(Seatbelts$DriversKilled > 118.5, labels = c("below", "above"))
month <- factor(Seatbelts$Month > 96.5, labels = c("below", "above"))
plot(DriversKilled~Month,data=Seatbelts,col = "darkgreen", main = "Plot of Drivers Killed vs Month")
abline(v = median(Seatbelts$Month), col = "red", lw=2, lty=2)
abline(h = median(Seatbelts$DriversKilled), col = "darkblue", lw=2,lty = 2)
legend ( "topright",legend = c("Median of DriversKilled = 118.5", "Median of Month = 96.5"), col = c("darkblue", "red"),lty=c(2,2),lw=2)
counts <- table(killed, month)
counts
counts.X2<-chisq.test(counts, correct = FALSE )
counts.X2
cat("Observed p-value is less than 0.05: \n")
counts.X2$p.value<(1-0.95)
cat("\nObserved statistic is greater than Chi-sq statistic for Alpha = 0.05: \n")
counts.X2$statistic > qchisq(0.95,df=1,lower.tail = TRUE)
exp.value <- function(x){
e11 <- x[3, 1] * x[1, 3] / x[3, 3]
e12 <- x[3, 2] * x[1, 3] / x[3, 3]
e21 <- x[3, 1] * x[2, 3] / x[3, 3]
e22 <- x[3, 2] * x[2, 3] / x[3, 3]
return(c(e11,e12,e21,e22))
}
counts.margins <- addmargins(counts)
counts.margins
counts.m <- matrix(counts,ncol=2, dimnames = list(c("below","above"),c("below","above")))
#counts.m
#seatbelt.expected <- matrix(exp.value(matrix(m,ncol = 3)),ncol=2,dimnames = list(c("below","above"),c("below","above")))
seatbelt.expected <- matrix(exp.value(counts.margins),ncol=2,byrow=TRUE,dimnames = list(c("below","above"),c("below","above")))
#seatbelt.expected
chi.m<-(counts.m-seatbelt.expected)^2/seatbelt.expected
X2 <- sum(chi.m)
cat("\nObserved Chi-Squared Value: ", X2)
cat("\nObserved p-value: ", 1-pchisq(X2,df=1))
