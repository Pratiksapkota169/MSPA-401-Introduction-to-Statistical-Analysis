par(mfrow = c(1, 1))
library(moments)  # install.packages("moments")
kurtosis10 <- apply(sample10, MARGIN = 1, FUN = kurtosis)
quantile10 <- quantile(kurtosis10,c(0.025,0.25,0.75,0.975))
cat("(0.025,0.25,0.75,0.975) quantiles of kurtosis statistic computed from 1000 normal random samples of size n=10 respectively: ", quantile10)
kurtosis40 <- apply(sample40, MARGIN = 1, FUN = kurtosis)
quantile40 <- quantile(kurtosis40,c(0.025,0.25,0.75,0.975))
cat("\n\n(0.025,0.25,0.75,0.975) quantiles of kurtosis statistic computed from 1000 normal random samples of size n=40 respectively: ", quantile40)
kurtosis100 <- apply(sample100, MARGIN = 1, FUN = kurtosis)
quantile100 <- quantile(kurtosis100,c(0.025,0.25,0.75,0.975))
cat("\n\n(0.025,0.25,0.75,0.975) quantiles of kurtosis statistic computed from 1000 normal random samples of size n=100 respectively: ", quantile100)
par(mfrow = c(3, 1))
hist(kurtosis10, col = "lightblue", main = "Histogram of samples kurtosis with n=10")
abline(v = quantile10, col = "red",lty=2, lwd=2)
text(quantile10,rep(300,length=4),c("2.5% \nquantile","1st \nquartile","3rd \nquartile","97.5% \nquantile"), adj=c(-0.1,1),col="red")
hist(kurtosis40,col = rgb(1,0,0,0.5),  main = "Histogram of samples kurtosis with n=40")
abline(v = quantile40, col = "darkgreen",lty=2, lwd=2)
text(quantile40,rep(300,length=4),c("2.5% \nquantile","1st \nquartile","3rd \nquartile","97.5% \nquantile"), adj=c(-0.1,1),col="darkgreen")
hist(kurtosis100,col = rgb(0,1,0,0.5),  main = "Histogram of samples kurtosis with n=100")
abline(v = quantile100, col = "blue",lty=2, lwd=2)
text(quantile100,rep(200,length=4),c("2.5% \nquantile","1st \nquartile","3rd \nquartile","97.5% \nquantile"), adj=c(-0.1,1),col="blue")
par(mfrow = c(1, 1))
###Histograms with density overlaid (Using kernal density estimation)
par(mfrow = c(3, 1))
cells <- seq(0,8,0.5)
hist(kurtosis10,col = "lightblue", probability = T, breaks = cells, main = "Histogram of samples kurtosis with n=10")
points(density(kurtosis10),type="l",col="blue")
abline(v = quantile10, col = "red",lty=2, lwd=2)
text(quantile10,rep(0.6,length=4),c("2.5% \nquantile","1st \nquartile","3rd \nquartile","97.5% \nquantile"), adj=c(-0.1,1),col="red")
hist(kurtosis40,col = rgb(1,0,0,0.5), probability = T, breaks = cells,ylim=c(0.0,0.8), main = "Histogram of samples kurtosis with n=40")
points(density(kurtosis40),type="l",col="red")
abline(v = quantile40, col = "darkgreen",lty=2, lwd=2)
text(quantile40,rep(0.6,length=4),c("2.5% \nquantile","1st \nquartile","3rd \nquartile","97.5% \nquantile"), adj=c(-0.1,1),col="darkgreen")
hist(kurtosis100,col = rgb(0,1,0,0.5), probability = T, breaks = cells,ylim=c(0.0,1.0), main = "Histogram of samples kurtosis with n=100")
points(density(kurtosis100),type="l",col="darkgreen")
abline(v = quantile100, col = "blue",lty=2, lwd=2)
text(quantile100,rep(0.6,length=4),c("2.5% \nquantile","1st \nquartile","3rd \nquartile","97.5% \nquantile"), adj=c(-0.1,1),col="blue")
par(mfrow = c(1, 1))
example <- function(n){
set.seed(123)
result <- matrix(0, nrow = 1000, ncol = n)
for (k in 1:1000) {
result[k, ] <- rnorm(n, mean = 0, sd = 1)
}
return(result)
}
# We can define our 1000 x n matrices by passing our desired n to example(). For example, for
# n = 10:
sample10 <- example(10)
# You will need to add code here for creating the same objects with n = 40 and n = 100.
sample40 <- example(40)
sample100 <- example(100)
library(moments)  # install.packages("moments")
skewness10 <- apply(sample10, MARGIN = 1, FUN = skewness)
quantile10 <- quantile(skewness10,c(0.025,0.25,0.75,0.975))
cat("(0.025,0.25,0.75,0.975) quantiles of skewness statistic computed from 1000 normal random samples of size n=10 respectively: ", quantile10)
skewness40 <- apply(sample40, MARGIN = 1, FUN = skewness)
quantile40 <- quantile(skewness40,c(0.025,0.25,0.75,0.975))
cat("\n\n(0.025,0.25,0.75,0.975) quantiles of skewness statistic computed from 1000 normal random samples of size n=40 respectively: ", quantile40)
skewness100 <- apply(sample100, MARGIN = 1, FUN = skewness)
quantile100 <- quantile(skewness100,c(0.025,0.25,0.75,0.975))
cat("\n\n(0.025,0.25,0.75,0.975) quantiles of skewness statistic computed from 1000 normal random samples of size n=100 respectively: ", quantile100)
###Basic histograms
par(mfrow = c(3, 1))
hist(skewness10, col = "lightblue", main = "Histogram of samples skewness with n=10")
abline(v = quantile10, col = "red",lty=2, lwd=2)
#text(quantile10,rep(200,length=4),c("2.5% \nquantile","1st \nquartile","3rd \nquartile","97.5% \nquantile"), adj=c(-0.1,1),col="red")
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(skewness40,col = rgb(1,0,0,0.5),  main = "Histogram of samples skewness with n=40")
abline(v = quantile40, col = "darkgreen",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(skewness100,col = rgb(0,1,0,0.5),  main = "Histogram of samples skewness with n=100")
abline(v = quantile100, col = "blue",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
par(mfrow = c(1, 1))
###Histograms with density overlaid (kernal density estimation)
par(mfrow = c(3, 1))
cells <- seq(-2,2,0.2)
hist(skewness10,col = "lightblue", probability = T, breaks = cells, main = "Histogram of samples skewness with n=10")
points(density(skewness10),type="l",col="darkblue")
abline(v = quantile10, col = "red",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(skewness40,col = rgb(1,0,0,0.5), probability = T, breaks = cells,ylim = c(0.0,1.5), main = "Histogram of samples skewness with n=40")
points(density(skewness40),type="l",col="red")
abline(v = quantile40, col = "darkgreen",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(skewness100,col = rgb(0,1,0,0.5), probability = T, breaks = cells,ylim = c(0.0,2.0), main = "Histogram of samples skewness with n=100")
points(density(skewness100),type="l",col="darkgreen")
abline(v = quantile100, col = "blue",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
par(mfrow = c(1, 1))
knitr::opts_chunk$set(echo = TRUE)
example <- function(n){
set.seed(123)
result <- matrix(0, nrow = 1000, ncol = n)
for (k in 1:1000) {
result[k, ] <- rnorm(n, mean = 0, sd = 1)
}
return(result)
}
# We can define our 1000 x n matrices by passing our desired n to example(). For example, for
# n = 10:
sample10 <- example(10)
# You will need to add code here for creating the same objects with n = 40 and n = 100.
sample40 <- example(40)
sample100 <- example(100)
library(moments)  # install.packages("moments")
skewness10 <- apply(sample10, MARGIN = 1, FUN = skewness)
quantile10 <- quantile(skewness10,c(0.025,0.25,0.75,0.975))
cat("(0.025,0.25,0.75,0.975) quantiles of skewness statistic computed from 1000 normal random samples of size n=10 respectively: ", quantile10)
skewness40 <- apply(sample40, MARGIN = 1, FUN = skewness)
quantile40 <- quantile(skewness40,c(0.025,0.25,0.75,0.975))
cat("\n\n(0.025,0.25,0.75,0.975) quantiles of skewness statistic computed from 1000 normal random samples of size n=40 respectively: ", quantile40)
skewness100 <- apply(sample100, MARGIN = 1, FUN = skewness)
quantile100 <- quantile(skewness100,c(0.025,0.25,0.75,0.975))
cat("\n\n(0.025,0.25,0.75,0.975) quantiles of skewness statistic computed from 1000 normal random samples of size n=100 respectively: ", quantile100)
###Basic histograms
par(mfrow = c(3, 1))
hist(skewness10, col = "lightblue", main = "Histogram of samples skewness with n=10")
abline(v = quantile10, col = "red",lty=2, lwd=2)
#text(quantile10,rep(200,length=4),c("2.5% \nquantile","1st \nquartile","3rd \nquartile","97.5% \nquantile"), adj=c(-0.1,1),col="red")
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(skewness40,col = rgb(1,0,0,0.5),  main = "Histogram of samples skewness with n=40")
abline(v = quantile40, col = "darkgreen",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(skewness100,col = rgb(0,1,0,0.5),  main = "Histogram of samples skewness with n=100")
abline(v = quantile100, col = "blue",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
par(mfrow = c(1, 1))
###Histograms with density overlaid (kernal density estimation)
par(mfrow = c(3, 1))
cells <- seq(-2,2,0.2)
hist(skewness10,col = "lightblue", probability = T, breaks = cells, main = "Histogram of samples skewness with n=10")
points(density(skewness10),type="l",col="darkblue")
abline(v = quantile10, col = "red",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(skewness40,col = rgb(1,0,0,0.5), probability = T, breaks = cells,ylim = c(0.0,1.5), main = "Histogram of samples skewness with n=40")
points(density(skewness40),type="l",col="red")
abline(v = quantile40, col = "darkgreen",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(skewness100,col = rgb(0,1,0,0.5), probability = T, breaks = cells,ylim = c(0.0,2.0), main = "Histogram of samples skewness with n=100")
points(density(skewness100),type="l",col="darkgreen")
abline(v = quantile100, col = "blue",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
par(mfrow = c(1, 1))
library(moments)  # install.packages("moments")
kurtosis10 <- apply(sample10, MARGIN = 1, FUN = kurtosis)
quantile10 <- quantile(kurtosis10,c(0.025,0.25,0.75,0.975))
cat("(0.025,0.25,0.75,0.975) quantiles of kurtosis statistic computed from 1000 normal random samples of size n=10 respectively: ", quantile10)
kurtosis40 <- apply(sample40, MARGIN = 1, FUN = kurtosis)
quantile40 <- quantile(kurtosis40,c(0.025,0.25,0.75,0.975))
cat("\n\n(0.025,0.25,0.75,0.975) quantiles of kurtosis statistic computed from 1000 normal random samples of size n=40 respectively: ", quantile40)
kurtosis100 <- apply(sample100, MARGIN = 1, FUN = kurtosis)
quantile100 <- quantile(kurtosis100,c(0.025,0.25,0.75,0.975))
cat("\n\n(0.025,0.25,0.75,0.975) quantiles of kurtosis statistic computed from 1000 normal random samples of size n=100 respectively: ", quantile100)
par(mfrow = c(3, 1))
hist(kurtosis10, col = "lightblue", main = "Histogram of samples kurtosis with n=10")
abline(v = quantile10, col = "red",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(kurtosis40,col = rgb(1,0,0,0.5),  main = "Histogram of samples kurtosis with n=40")
abline(v = quantile40, col = "darkgreen",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(kurtosis100,col = rgb(0,1,0,0.5),  main = "Histogram of samples kurtosis with n=100")
abline(v = quantile100, col = "blue",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
par(mfrow = c(1, 1))
###Histograms with density overlaid (Using kernal density estimation)
par(mfrow = c(3, 1))
cells <- seq(0,8,0.5)
hist(kurtosis10,col = "lightblue", probability = T, breaks = cells, main = "Histogram of samples kurtosis with n=10")
points(density(kurtosis10),type="l",col="blue")
abline(v = quantile10, col = "red",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(kurtosis40,col = rgb(1,0,0,0.5), probability = T, breaks = cells,ylim=c(0.0,0.8), main = "Histogram of samples kurtosis with n=40")
points(density(kurtosis40),type="l",col="red")
abline(v = quantile40, col = "darkgreen",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(kurtosis100,col = rgb(0,1,0,0.5), probability = T, breaks = cells,ylim=c(0.0,1.0), main = "Histogram of samples kurtosis with n=100")
points(density(kurtosis100),type="l",col="darkgreen")
abline(v = quantile100, col = "blue",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
par(mfrow = c(1, 1))
knitr::opts_chunk$set(echo = TRUE)
example <- function(n){
set.seed(123)
result <- matrix(0, nrow = 1000, ncol = n)
for (k in 1:1000) {
result[k, ] <- rnorm(n, mean = 0, sd = 1)
}
return(result)
}
# We can define our 1000 x n matrices by passing our desired n to example(). For example, for
# n = 10:
sample10 <- example(10)
# You will need to add code here for creating the same objects with n = 40 and n = 100.
sample40 <- example(40)
sample100 <- example(100)
library(moments)  # install.packages("moments")
skewness10 <- apply(sample10, MARGIN = 1, FUN = skewness)
quantile10 <- quantile(skewness10,c(0.025,0.25,0.75,0.975))
cat("(0.025,0.25,0.75,0.975) quantiles of skewness statistic computed from 1000 normal random samples of size n=10 respectively: ", quantile10)
skewness40 <- apply(sample40, MARGIN = 1, FUN = skewness)
quantile40 <- quantile(skewness40,c(0.025,0.25,0.75,0.975))
cat("\n\n(0.025,0.25,0.75,0.975) quantiles of skewness statistic computed from 1000 normal random samples of size n=40 respectively: ", quantile40)
skewness100 <- apply(sample100, MARGIN = 1, FUN = skewness)
quantile100 <- quantile(skewness100,c(0.025,0.25,0.75,0.975))
cat("\n\n(0.025,0.25,0.75,0.975) quantiles of skewness statistic computed from 1000 normal random samples of size n=100 respectively: ", quantile100)
###Basic histograms
par(mfrow = c(3, 1))
hist(skewness10, col = "lightblue", main = "Histogram of samples skewness with n=10")
abline(v = quantile10, col = "red",lty=2, lwd=2)
#text(quantile10,rep(200,length=4),c("2.5% \nquantile","1st \nquartile","3rd \nquartile","97.5% \nquantile"), adj=c(-0.1,1),col="red")
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(skewness40,col = rgb(1,0,0,0.5),  main = "Histogram of samples skewness with n=40")
abline(v = quantile40, col = "darkgreen",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(skewness100,col = rgb(0,1,0,0.5),  main = "Histogram of samples skewness with n=100")
abline(v = quantile100, col = "blue",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
par(mfrow = c(1, 1))
###Histograms with density overlaid (kernal density estimation)
par(mfrow = c(3, 1))
cells <- seq(-2,2,0.2)
hist(skewness10,col = "lightblue", probability = T, breaks = cells, main = "Histogram of samples skewness with n=10 (with density overlaid)")
points(density(skewness10),type="l",col="darkblue")
abline(v = quantile10, col = "red",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(skewness40,col = rgb(1,0,0,0.5), probability = T, breaks = cells,ylim = c(0.0,1.5), main = "Histogram of samples skewness with n=40 (with density overlaid)")
points(density(skewness40),type="l",col="red")
abline(v = quantile40, col = "darkgreen",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(skewness100,col = rgb(0,1,0,0.5), probability = T, breaks = cells,ylim = c(0.0,2.0), main = "Histogram of samples skewness with n=100 (with density overlaid)")
points(density(skewness100),type="l",col="darkgreen")
abline(v = quantile100, col = "blue",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
par(mfrow = c(1, 1))
library(moments)  # install.packages("moments")
kurtosis10 <- apply(sample10, MARGIN = 1, FUN = kurtosis)
quantile10 <- quantile(kurtosis10,c(0.025,0.25,0.75,0.975))
cat("(0.025,0.25,0.75,0.975) quantiles of kurtosis statistic computed from 1000 normal random samples of size n=10 respectively: ", quantile10)
kurtosis40 <- apply(sample40, MARGIN = 1, FUN = kurtosis)
quantile40 <- quantile(kurtosis40,c(0.025,0.25,0.75,0.975))
cat("\n\n(0.025,0.25,0.75,0.975) quantiles of kurtosis statistic computed from 1000 normal random samples of size n=40 respectively: ", quantile40)
kurtosis100 <- apply(sample100, MARGIN = 1, FUN = kurtosis)
quantile100 <- quantile(kurtosis100,c(0.025,0.25,0.75,0.975))
cat("\n\n(0.025,0.25,0.75,0.975) quantiles of kurtosis statistic computed from 1000 normal random samples of size n=100 respectively: ", quantile100)
par(mfrow = c(3, 1))
hist(kurtosis10, col = "lightblue", main = "Histogram of samples kurtosis with n=10")
abline(v = quantile10, col = "red",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(kurtosis40,col = rgb(1,0,0,0.5),  main = "Histogram of samples kurtosis with n=40")
abline(v = quantile40, col = "darkgreen",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(kurtosis100,col = rgb(0,1,0,0.5),  main = "Histogram of samples kurtosis with n=100")
abline(v = quantile100, col = "blue",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
par(mfrow = c(1, 1))
###Histograms with density overlaid (Using kernal density estimation)
par(mfrow = c(3, 1))
cells <- seq(0,8,0.5)
hist(kurtosis10,col = "lightblue", probability = T, breaks = cells, main = "Histogram of samples kurtosis with n=10 (with density overlaid)")
points(density(kurtosis10),type="l",col="blue")
abline(v = quantile10, col = "red",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(kurtosis40,col = rgb(1,0,0,0.5), probability = T, breaks = cells,ylim=c(0.0,0.8), main = "Histogram of samples kurtosis with n=40 (with density overlaid)")
points(density(kurtosis40),type="l",col="red")
abline(v = quantile40, col = "darkgreen",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
hist(kurtosis100,col = rgb(0,1,0,0.5), probability = T, breaks = cells,ylim=c(0.0,1.0), main = "Histogram of samples kurtosis with n=100 (with density overlaid)")
points(density(kurtosis100),type="l",col="darkgreen")
abline(v = quantile100, col = "blue",lty=2, lwd=2)
legend("topright", legend="(0.025,0.25,0.75,0.975) Quantiles")
par(mfrow = c(1, 1))
cost.data <- c(147,152,119,142,163,151,123,118,145,166,149,130,158,175,142,160,
175,125,147,210,132,156,139,122,163,175,120,135,207,141,170,110)
z <- (mean(cost.data)-141)/(30/sqrt(32))
z
critical.value <- qnorm(0.95, mean = 0, sd = 1, lower.tail = TRUE)
critical.value
pnorm(z, mean = 0, sd = 1, lower.tail = FALSE)
critical.value*(30/sqrt(32))+141
t <- (mean(cost.data)-141)/(sd(cost.data)/(sqrt(32)))
t
critical.value <- qt(0.95, 31, lower.tail = TRUE)
critical.value
pt(t, 31, lower.tail = FALSE)
t.test(cost.data, alternative = c("greater"), mu = 141, conf.level = 0.95)
z <- (215/400 - 0.5)/sqrt(0.5*0.5/400)
z
critical.value <- qnorm(0.95, mean = 0, sd = 1, lower.tail = TRUE)
critical.value
pnorm(z, mean = 0, sd = 1, lower.tail = FALSE)
prop.test(215, 400, alternative = c("greater"), conf.level = 0.95, correct = FALSE)
prop.test(215, 400, alternative = c("greater"), conf.level = 0.95, correct = TRUE)
binom.test(215, 400, p = 0.5, alternative = c("greater"), conf.level = 0.95)
binom.test(215, 400, p = 0.5, alternative = c("greater"), conf.level = 0.95)
chi <- (31*var(cost.data)/30^2)  # This is the test statistic.
chi
q.values <- qchisq(0.05, 31, lower.tail = TRUE)
q.values
pchisq(chi, 31, lower.tail = TRUE)
n <- 60
alpha <- 0.01
sigma <- 0.1
nominal <- 12.0
critical.z <- qnorm(alpha,0,1)  # Refer to Figure 9.22 and following.
critical.z   # Note that we are working in the left tail of the normal distribution.
value <- nominal + critical.z*(sigma/sqrt(n))
value
alternative <- 11.96
zvalue <- (value-alternative)*(sqrt(n)/sigma)
zvalue
pnorm(zvalue, 0, 1, lower.tail = FALSE)  # Type II error rate
cord.x <- c(zvalue, seq(zvalue, +3.0, 0.01), 3.0)
cord.y <- c(0, dnorm(seq(zvalue, +3.0, 0.01),0,1), 0)
curve(dnorm(x,0,1),xlim=c(-3,3),main="Standard Normal Density", ylab = "density",
col = "orange", lwd = 2)
polygon(cord.x,cord.y,col="red")
abline(v = zvalue, col="green", lty = 3, lwd = 3)
abline(v = 0)
finite <- sqrt((200 - 39)/(199))
finite
std <- 11 *finite/sqrt(39)
std
z.values <- qnorm(c(0.02, 0.98), mean = 0, sd = 1, lower.tail = TRUE)
z.values
# Note that this can be worked in reverse.
pnorm(z.values,mean = 0, sd = 1, lower.tail = TRUE)
c(signif(66+z.values[1]*std, digits=4), signif(66+z.values[2]*std, digits=4))
std <- 11/sqrt(39)
c(signif(66+z.values[1]*std, digits=4), signif(66+z.values[2]*std, digits=4))
data.set <- c(16.4,17.1,17.0,15.6,16.2,14.8,16.0,15.6,17.3,17.4,15.6,15.7,17.2,
16.6,16.0,15.3,15.4,16.0,15.8,17.2,14.6,15.5,14.9,16.7,16.3)
mean(data.set)   # This is the point estimate of the population mean.
t.test(data.set, alternative = c("two.sided"), mu = 0, conf.level = 0.99)
t.values <- qt(c(0.005, 0.995), 24, lower.tail = TRUE)
std <- sd(data.set)/sqrt(25)
mu <- mean(data.set)
c(signif(mu+t.values[1]*std, digits=5), signif(mu+t.values[2]*std, digits=5))
z.values <- qnorm(c(0.04, 0.96), mean = 0, sd = 1, lower.tail = TRUE)
z.values
std <- sqrt(0.51*0.49/210)
std
c(signif(0.51+z.values[1]*std, digits=2), signif(0.51+z.values[2]*std, digits=2))
prop.test(107, 210, alternative = c("two.sided"), conf.level = 0.92, correct = FALSE)
prop.test(107, 210, alternative = c("two.sided"), conf.level = 0.92, correct = TRUE)
binom.test(107, 210, p=0.5, alternative = c("two.sided"), conf.level = 0.92)
chi.values <- qchisq(c(0.025, 0.975), 24, lower.tail = TRUE)
chi.values
sigma <- 1.12^2
c(signif(24*sigma/chi.values[2], digits = 4),
signif(24*sigma/chi.values[1], digits = 5))
result <- c(sqrt(signif(24*sigma/chi.values[2], digits = 4)),
sqrt(signif(24*sigma/chi.values[1], digits = 5)))
result
result*result
result <- ((qnorm(0.995, mean = 0, sd = 1, lower.tail = TRUE))^2)*0.5*0.5/0.05^2
signif(result, digits = 4)
n <- 50
p <- 0.1   # This is the binomial probability.
N <- 10000  # number of samples to draw
proportions <- numeric(0)
set.seed(123)
proportions <- rbinom(N,n,p)/n  # This produces the binomial variables.
number.cells <- nclass.Sturges(proportions)
delta <- max(proportions)/number.cells
cells <- seq(0.0, max(proportions), delta)
center <- seq(delta/2, max(proportions), delta)
std <- sqrt(p*(1-p)/n)
x <- center
limit <- max(N*(pnorm(x+delta/2,mean=p,sd=std)-pnorm(x-delta/2,mean=p,sd=std)))
hist(proportions, breaks=cells,freq = TRUE, col = "blue", ylim = c(0, limit),
xlab="sample proportion", main="Histogram of Binomial Proportions with Normal Density")
curve(N*(pnorm(x+delta/2,mean=p,sd=std)-pnorm(x-delta/2,mean=p,sd=std)),
add=TRUE, col="orange",lwd=2)
abline(v=p,col="orange",lwd=2,lty=2)
abline(v=p+std*qnorm(0.95,mean=0,sd=1,lower.tail=TRUE),col="red",lwd=2)
sum(proportions > p+std*qnorm(0.95,mean=0,sd=1,lower.tail=TRUE))/N
##Problem 8
t.values <- qt(c(0.005, 0.995), 24, lower.tail = TRUE)
t.values
t.values <- qt(c(0.025, 0.975), 24, lower.tail = TRUE)
t.values
2.79694- 2.063899
##Problem 8
t.values <- qt(c(0.005, 0.995), 143, lower.tail = TRUE)
t.values
t.values <- qt(c(0.025, 0.975), 143, lower.tail = TRUE)
t.values
critical.value <- qt(0.99, 143, lower.tail = TRUE)
critical.value
t <- (mu-141)/(sigma/(sqrt(143)))
t
critical.value <- qt(0.95, 143, lower.tail = TRUE)
critical.value
critical.value <- qt(0.90, 17, lower.tail = TRUE)
critical.value
critical.value <- qt(0.05, 17, lower.tail = TRUE)
critical.value
critical.value <- qt(0.005, 17, lower.tail = TRUE)
critical.value
critical.value <- qt(0.025, 17, lower.tail = TRUE)
critical.value
critical.value <- qt(0.005, 13, lower.tail = TRUE)
critical.value
critical.value <- qt(0.005, 143, lower.tail = TRUE)
critical.value
critical.value <- qt(0.025, 143, lower.tail = TRUE)
critical.value
65.83 - (1.97*0.613/12)
65.83 + (1.97*0.613/12)
critical.value <- qt(0.95, 143, lower.tail = TRUE)
critical.value
65.83 + (2.611*0.613/12)
1.6*6/5.222
(1.84*2.611/12)+65.7
66.1-(1.97*1.84/12)
66.1+(1.97*1.84/12)
66.1+(2.611*1.84/12)
critical.value <- qt(0.005, 143, lower.tail = TRUE)
critical.value
1.6*6/2.611
(3.68*2.611/12)+65.7
66.5-1.97*3.68/12
66.5+1.97*3.68/12
t <- (mu-0)/(sigma/(sqrt(143)))
t
pt(t, 143, lower.tail = FALSE)
critical.value <- qt(0.005, 143, lower.tail = TRUE)
critical.value
critical.value <- qt(0.025, 143, lower.tail = TRUE)
critical.value
1.6*6/2.611
(3.68*2.611/12)+65.7
66.5-1.97*3.68/12
66.5+1.97*3.68/12
# Note that this can be worked in reverse.
pnorm(-1.63,mean = 0, sd = 1, lower.tail = TRUE)
critical.value <- qnorm(0.9, mean = 0, sd = 1, lower.tail = TRUE)
critical.value
# Note that this can be worked in reverse.
pnorm(1.63,mean = 0, sd = 1, lower.tail = TRUE)
# Note that this can be worked in reverse.
pnorm(-1.63,mean = 0, sd = 1, lower.tail = TRUE)
critical.value <- qnorm(0.1, mean = 0, sd = 1, lower.tail = TRUE)
critical.value
critical.value <- qnorm(0.9, mean = 0, sd = 1, lower.tail = TRUE)
critical.value
# Note that this can be worked in reverse.
pnorm(1.5,mean = 0, sd = 1, lower.tail = TRUE)
z.values/2
# Note that this can be worked in reverse.
pnorm(1.5,mean = 0, sd = 1, lower.tail = TRUE)/2
# Note that this can be worked in reverse.
pnorm(1.5,mean = 0, sd = 1, lower.tail = FALSE)
# Note that this can be worked in reverse.
pnorm(-1.63,mean = 0, sd = 1, lower.tail = FALSE)
# Note that this can be worked in reverse.
pnorm(-1.63,mean = 0, sd = 1, lower.tail = FALSE)
# Note that this can be worked in reverse.
pnorm(-1.63,mean = 0, sd = 1, lower.tail = TRUE)
##Problem 10
z.values <- qnorm(c(0.05, 0.95), mean = 0, sd = 1, lower.tail = TRUE)
z.values
critical.value <- qnorm(0.9, mean = 0, sd = 1, lower.tail = TRUE)
critical.value
##Problem 10
z.values <- qnorm(c(0.05, 0.95), mean = 0, sd = 1, lower.tail = TRUE)
z.values
# Note that this can be worked in reverse.
pnorm(z.values,mean = 0, sd = 1, lower.tail = TRUE)
pnorm(-1.63,mean = 0, sd = 1, lower.tail = FALSE)
pnorm(1.63,mean = 0, sd = 1, lower.tail = TRUE)
pnorm(1.63,mean = 0, sd = 1, lower.tail = FALSE)
pnorm(-1.63,mean = 0, sd = 1, lower.tail = FALSE)
pnorm(-1.63,mean = 0, sd = 1, lower.tail = FALSE)
pnorm(-1.63,mean = 0, sd = 1, lower.tail = TRUE)
0.1031/2
pnorm(-1.63,mean = 0, sd = 1, lower.tail = TRUE)
z.values <- qnorm(c(0.05, 0.95), mean = 0, sd = 1, lower.tail = TRUE)
z.values
critical.value <- qnorm(0.005, mean = 0, sd = 1, lower.tail = TRUE)
critical.value
critical.value <- qnorm(0.005, mean = 0, sd = 1, lower.tail = TRUE)
critical.value
##Problem 3
p<-30/56
q<-1-p
n<-56
z.values <- qnorm(c(0.025, 0.975), mean = 0, sd = 1, lower.tail = TRUE)
z.values
std <- sqrt(p*q/n)
std
c(signif(p+z.values[1]*std, digits=3), signif(p+z.values[2]*std, digits=3))
prop.test(30, 56, alternative = c("two.sided"), conf.level = 0.95, correct = FALSE)
prop.test(30, 56, alternative = c("two.sided"), conf.level = 0.95, correct = TRUE)
E<-0.005
z<-2.05
p<-0.5
q<-1-p
n<-(z**2)*p*q/(E**2)
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
n
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
t.values <- qt(c(0.025, 0.975), 9, lower.tail = TRUE)
std <- 4.8/sqrt(10)
mu <- 8.1
c(signif(mu+t.values[1]*std, digits=3), signif(mu+t.values[2]*std, digits=4))
###problem 7
z.values <- qnorm(c(0.025, 0.975), mean = 0, sd = 1, lower.tail = TRUE)
z.values
(z.values[1]*500/135)**2
